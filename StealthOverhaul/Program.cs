using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda;
using StealthOverhaul.Settings;

namespace StealthOverhaul
{
    public static class Program
    {
        // Declare a static Settings object to hold the patcher's settings. Set to null to prevent reallocation when this is assigned by SetAutogeneratedSettings() in Main().
        private static Lazy<TopLevelSettings> _lazySettings = null!;
        // Declare a property for convenience
        private static TopLevelSettings Settings => _lazySettings.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                   .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                   .SetAutogeneratedSettings("Settings", "settings.json", out _lazySettings)
                   .SetTypicalOpen(GameRelease.SkyrimSE, "StealthOverhaul.esp")
                   .Run(args)
                   .ConfigureAwait(false);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            Console.WriteLine("\n--- PATCHER STARTING ---"); // begin


            // Add GMST records
            if (!Settings.StealthGameSettingPresets.ContainsKey(Settings.ActivePresetName))
                throw new InvalidOperationException($"Couldn't find a preset named \"{Settings.ActivePresetName}\"!");

            Settings.StealthGameSettingPresets[Settings.ActivePresetName].ApplyGameSettingsToPatch(state, out int count);

            Console.WriteLine("--- PATCHER COMPLETE ---");

            if (count.Equals(0))
                Console.WriteLine("Modified 0 GameSetting records.");
            else
                Console.WriteLine($"Modified {count} GameSetting record{(count != 1 ? "s" : "")}.\n");
        }
    }
}